#include "testMovementWhileInCheck.h"

void testMovementWhileInCheck(){
    std::vector<Test> testLists;
    testLists.push_back(testIfDetectCheck());
    testLists.push_back(testIfCheckLimitsMovement());
    testLists.push_back(testIfDetectCheckmate());
    testLists.push_back(testInvalidMovementLeadToCheck());
    testLists.push_back(testDiscoverCheck());
    Test::printTestSuit(testLists, "Test Movement While In Check");
}

Test testIfDetectCheck(){
    Test test("Test if In Check");
    ChessBoard board;
    test.compare(board.boardInCheck(), false,
            "Not In Check When Game Start");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', 'A', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.boardInCheck(), true,
            "Detect Checked By Pawn");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', 'R', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.boardInCheck(), true,
            "Detect Checked By Rook");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', 'N', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.boardInCheck(), true,
            "Detect Checked By Knight");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', 'B', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.boardInCheck(), true,
            "Detect Checked By Bishop");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', 'Q', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.boardInCheck(), true,
            "Detect Checked By Queen");

    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', 'A', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.boardInCheck(), false,
            "Detect if False Checked By Pawn");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', 'R', '-', 'a', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.boardInCheck(), false,
            "Detect False Checked By Rook");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', 'N', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.boardInCheck(), true,
            "Detect Checked By Knight");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', 'B', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', 'a', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.boardInCheck(), false,
            "Detect False Checked By Bishop");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', 'a', '-', '-', '-', '-',  // 5
        '-', '-', 'Q', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.boardInCheck(), false,
            "Detect False Checked By Queen");

    return test;
}

Test testIfCheckLimitsMovement(){
    Test test("Test if Movement is Limited When in Check");
    ChessBoard board;

    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', 'A', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.move({4, 7}, {3, 7}), false,
            "Not escaping check by Pawn");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', 'R', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.move({4, 7}, {3, 7}), false,
            "Not escaping check by Rook");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', 'N', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.move({4, 7}, {3, 7}), false,
            "Not escaping check by Knight");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', 'B', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.move({4, 7}, {3, 7}), false,
            "Not escaping check by Bishop");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', 'Q', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.move({4, 7}, {3, 7}), false,
            "Not escaping check by Queen");

    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', 'A', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.move({3, 5}, {2, 5}), true,
            "Escaping check by Pawn");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', 'R', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.move({3, 5}, {2, 5}), true,
            "Escaping check by Rook");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', 'N', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.move({3, 5}, {2, 5}), true,
            "Escaping check by Knight");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', 'B', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.move({3, 5}, {2, 5}), true,
            "Escaping check by Bishop");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', 'k', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', 'a',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', 'Q', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'r',  // 7
            });
    test.compare(board.move({3, 5}, {2, 5}), true,
            "Escaping check by Queen");

    return test;
}

Test testIfDetectCheckmate(){
    Test test("Test if Checkmate is detected");
    ChessBoard board;
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', '-', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', 'K', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', '-', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', '-',  // 4
        '-', '-', '-', 'A', 'A', '-', '-', '-',  // 5
        '-', '-', '-', 'A', 'A', '-', '-', '-',  // 6
        '-', '-', '-', '-', 'k', '-', '-', '-',  // 7
            });
    test.compare(board.gameIsRunning(), false,
            "Checkmated By Pawns");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', '-', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', 'K', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', '-', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', '-',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', '-', '-', 'R', '-', '-', '-',  // 6
        '-', '-', 'k', '-', 'R', '-', '-', '-',  // 7
            });
    test.compare(board.gameIsRunning(), false,
            "Checkmated By Rooks");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', '-', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', 'K', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', '-', '-', '-',  // 3
        'N', '-', '-', '-', '-', '-', '-', '-',  // 4
        '-', 'N', 'N', '-', '-', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        'k', '-', '-', '-', '-', '-', '-', '-',  // 7
            });
    test.compare(board.gameIsRunning(), false,
            "Checkmated By Knights");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', '-', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', 'K', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', '-', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', '-',  // 4
        '-', '-', '-', '-', '-', 'B', 'B', '-',  // 5
        '-', '-', '-', '-', '-', 'B', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', 'k',  // 7
            });
    test.compare(board.gameIsRunning(), false,
            "Checkmated By Bishops");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', '-', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', 'K', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', 'Q', '-', '-', '-', '-', '-',  // 3
        '-', '-', '-', 'k', '-', '-', '-', '-',  // 4
        '-', '-', '-', '-', 'Q', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', '-', '-', '-', '-', '-', '-', '-',  // 7
            });
    test.compare(board.gameIsRunning(), false,
            "Checkmated By Queens");
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', '-', '-', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', '-', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', '-',  // 4
        '-', '-', '-', 'K', '-', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
        '-', 'R', '-', 'k', '-', '-', '-', '-',  // 7
            });
    test.compare(board.gameIsRunning(), false,
            "Checkmated With King's Assist");

    return test;
}

Test testInvalidMovementLeadToCheck(){
    Test test("Test Invalid Movement Lead To Check");
    ChessBoard board;
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', '-', '-', 'R', 'K', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', '-', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', '-',  // 4
        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
        '-', '-', '-', '-', '-', 'n', '-', '-',  // 6
        '-', '-', '-', '-', '-', 'k', '-', '-',  // 7
            });
    test.compare(board.move({6, 5}, {5, 7}), false,
            "Expose King By Moving Knight");
    return test;
}

Test testDiscoverCheck(){
    Test test("Test Discover Checks");
    ChessBoard board;
    board.setBoard({
    //   0    1    2    3    4    5    6    7
        '-', '-', '-', 'K', 'R', '-', '-', '-',  // 0
        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
        '-', '-', '-', '-', '-', '-', '-', '-',  // 3
        '-', '-', '-', '-', '-', '-', '-', '-',  // 4
        '-', '-', '-', 'n', '-', '-', '-', '-',  // 5
        '-', '-', '-', 'r', '-', '-', '-', '-',  // 6
        '-', '-', '-', 'k', '-', '-', '-', '-',  // 7
            });
    test.compare(board.move({5, 3}, {4, 5}), true,
            "Discover Check With Knight");
    test.compare(board.move({0, 4}, {7, 4}), false,
            "Ignore Discover Check And Move Rook");
    test.compare(board.move({0, 3}, {1, 4}), true,
            "Escape Discover Check");
//    board.setBoard({
//    //   0    1    2    3    4    5    6    7
//        '-', '-', '-', '-', '-', '-', '-', '-',  // 0
//        '-', '-', '-', '-', '-', '-', '-', '-',  // 1
//        '-', '-', '-', '-', '-', '-', '-', '-',  // 2
//        '-', '-', '-', '-', '-', '-', '-', '-',  // 3
//        '-', '-', '-', '-', '-', '-', '-', '-',  // 4
//        '-', '-', '-', '-', '-', '-', '-', '-',  // 5
//        '-', '-', '-', '-', '-', '-', '-', '-',  // 6
//        '-', '-', '-', '-', '-', '-', '-', '-',  // 7
//            });
    
    return test;
}



